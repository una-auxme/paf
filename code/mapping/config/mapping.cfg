#!/usr/bin/env python

PACKAGE = "mapping"

from dynamic_reconfigure.parameter_generator_catkin import *


gen = ParameterGenerator()



tab_inputs = gen.add_group("Sources", type="tab")
tab_inputs.add("enable_radar_cluster", bool_t, 0, "Enable Radar Cluster integration (not yet implemented)", True)
tab_inputs.add("enable_lidar_cluster", bool_t, 0, "Enable Lidar Cluster integration (not yet implemented)", True)
tab_inputs.add("enable_vision_cluster", bool_t, 0, "Enable Vision Node Cluster integration", True)
tab_inputs.add("enable_raw_lidar_points", bool_t, 0, "Enable raw lidar input to mapping.", False)
tab_inputs.add("enable_lane_marker", bool_t, 0, "Enable Lane Mark integration", True)

tab_inputs.add("enable_stop_marks", bool_t, 0, "Enable stop marks from the UpdateStopMarks service.", True)



tab_filters = gen.add_group("Filtering", type="tab")
tab_filters.add("enable_merge_filter", bool_t, 0, "Enable or disable the merging filter.", True)
tab_filters.add("merge_growth_distance", double_t, 0, "Amount shapes grow before merging in meters.", 0.3, 0.0, 5.0)
tab_filters.add("min_merging_overlap_percent", double_t, 0, "Min overlap of the grown shapes in percent.", 0.5, 0.0, 1.0)
tab_filters.add("min_merging_overlap_area", double_t, 0, "Min overlap of the grown shapes in m2.", 0.5, 0.0, 5.0)
tab_filters.add("polygon_simplify_tolerance", double_t, 0, "The polygon simplify tolerance.", 0.01, 0.1, 1.0)

tab_lidar = gen.add_group("Lidar", type="tab")
tab_lidar.add("lidar_z_min", double_t, 0, "Excludes lidar points below this height.", -1.5, -10, 2.0)
tab_lidar.add("lidar_z_max", double_t, 0, "Exclude lidar points above this height.", 1.0, 0.0, 10.0)
tab_lidar.add("lidar_shape_radius", double_t, 0, "The radius with which lidar points get added to map.", 0.15, 0.0, 1.0)
tab_lidar.add("lidar_priority", double_t, 0, "The priority lidar points have in the map.", 0.25, 0.0, 1.0)
tab_lidar.add("lidar_discard_probability", double_t, 0, "Discard this many lidar point. Important for performance.", 0.9, 0.0, 1.0)


exit(gen.generate(PACKAGE, "mapping", "MappingIntegration"))
